kind: pipeline
name: LinuxTcp

platform:
  os: linux
  arch: amd64

steps:
  - name: PrepareReports
    image: ubuntu
    depends_on: [ clone ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: tcp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - mkdir --parents $REPORT_PATH/$PROTOCOL
      - echo "PROTOCOL $PROTOCOL\n
        DRONE_BRANCH ${DRONE_BRANCH}\n
        DRONE_BUILD_CREATED ${DRONE_BUILD_CREATED}\n
        DRONE_BUILD_EVENT ${DRONE_BUILD_EVENT}\n
        DRONE_BUILD_NUMBER ${DRONE_BUILD_NUMBER}\nu
        DRONE_BUILD_STARTED ${DRONE_BUILD_STARTED}\n
        DRONE_COMMIT_AFTER ${DRONE_COMMIT_AFTER}\n
        DRONE_COMMIT_AUTHOR ${DRONE_COMMIT_AUTHOR}\n
        DRONE_COMMIT_AUTHOR_AVATAR ${DRONE_COMMIT_AUTHOR_AVATAR}\n
        DRONE_COMMIT_AUTHOR_EMAIL ${DRONE_COMMIT_AUTHOR_EMAIL}\n
        DRONE_COMMIT_AUTHOR_NAME ${DRONE_COMMIT_AUTHOR_NAME}\n
        DRONE_COMMIT_BEFORE ${DRONE_COMMIT_BEFORE}\n
        DRONE_COMMIT_BRANCH ${DRONE_COMMIT_BRANCH}\n
        DRONE_COMMIT_LINK ${DRONE_COMMIT_LINK}\n
        DRONE_COMMIT ${DRONE_COMMIT}\n
        DRONE_COMMIT_MESSAGE ${DRONE_COMMIT_MESSAGE}\n
        DRONE_COMMIT_REF ${DRONE_COMMIT_REF}\n
        DRONE_COMMIT_SHA ${DRONE_COMMIT_SHA}\n
        DRONE_GIT_HTTP_URL ${DRONE_GIT_HTTP_URL}\n
        DRONE_GIT_SSH_URL ${DRONE_GIT_SSH_URL}\n
        DRONE_MACHINE ${DRONE_MACHINE}\n
        DRONE_PULL_REQUEST ${DRONE_PULL_REQUEST}\n
        DRONE_REPO ${DRONE_REPO}\n
        DRONE_REPO_BRANCH ${DRONE_REPO_BRANCH}\n
        DRONE_REMOTE_URL ${DRONE_REMOTE_URL}\n
        DRONE_REPO_LINK ${DRONE_REPO_LINK}\n
        DRONE_REPO_NAME ${DRONE_REPO_NAME}\n
        DRONE_REPO_NAMESPACE ${DRONE_REPO_NAMESPACE}\n
        DRONE_REPO_PRIVATE ${DRONE_REPO_PRIVATE}\n
        DRONE_REPO_SCM ${DRONE_REPO_SCM}\n
        DRONE_REPO_VISIBILITY ${DRONE_REPO_VISIBILITY}\n
        DRONE_RUNNER_HOST ${DRONE_RUNNER_HOST}\n
        DRONE_RUNNER_HOSTNAME ${DRONE_RUNNER_HOSTNAME}\n
        DRONE_RUNNER_PLATFORM ${DRONE_RUNNER_PLATFORM}\n
        DRONE_SOURCE_BRANCH ${DRONE_SOURCE_BRANCH}\n
        DRONE_SYSTEM_HOST ${DRONE_SYSTEM_HOST}\n
        DRONE_SYSTEM_HOSTNAME ${DRONE_SYSTEM_HOSTNAME}\n
        DRONE_RUNNER_LABEL ${DRONE_RUNNER_LABEL}\n
        DRONE_SYSTEM_VERSION ${DRONE_SYSTEM_VERSION}\n
        DRONE_TAG ${DRONE_TAG}\n
        DRONE_TARGET_BRANCH ${DRONE_TARGET_BRANCH}\n" > $REPORT_PATH/$PROTOCOL/drone_report


  - name: BuildBasicTests
    image: gcc7cmake:3.14.0
    when:
      status: [ success ]
    depends_on: [ PrepareReports ]
    commands:
      - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -G "CodeBlocks - Unix Makefiles" 2>&1 | tee cmake_report
      - cmake --build . --target mqtt-sn-client-network-interface-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-gateway-network-interface-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-fixed-size-ring-buffer-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-forwarder-test -- -j $(nproc) 2>&1 | tee make_report

  - name: GatherBuildReports
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    when:
      status: [ success, failure ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: tcp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cp cmake_report $REPORT_PATH/$PROTOCOL/cmake_report
      - cp make_report $REPORT_PATH/$PROTOCOL/make_report

  - name: MqttSnClientNetworkInterfaceUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-client-network-interface-test
        --gtest_output=xml:mqtt-sn-client-network-interface-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnGatewayNetworkInterfaceUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-gateway-network-interface-test
        --gtest_output=xml:mqtt-sn-gateway-network-interface-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnFixedSizeRingBufferUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-fixed-size-ring-buffer-test
        --gtest_output=xml:mqtt-sn-fixed-size-ring-buffer-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnForwarderIntegrationTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-forwarder-test
        --gtest_output=xml:mqtt-sn-forwarder-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: GatherUnitTestSuiteReports
    image: ubuntu
    when:
      status: [ success, failure ]
    depends_on: [ MqttSnClientNetworkInterfaceUnitTests, MqttSnGatewayNetworkInterfaceUnitTests, MqttSnFixedSizeRingBufferUnitTests, MqttSnForwarderIntegrationTests ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: tcp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cp mqtt-sn-client-network-interface-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-client-network-interface-test.xml
      - cp mqtt-sn-gateway-network-interface-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-gateway-network-interface-test.xml
      - cp mqtt-sn-fixed-size-ring-buffer-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-fixed-size-ring-buffer-test.xml
      - cp mqtt-sn-forwarder-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-forwarder-test.xml

volumes:
  - name: reports
    host:
      path: /var/local/drone/reports

---
kind: pipeline
name: LinuxUdp

platform:
  os: linux
  arch: amd64
steps:
  - name: PrepareReports
    image: ubuntu
    depends_on: [ clone ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: udp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - mkdir --parents $REPORT_PATH/$PROTOCOL
      - echo "PROTOCOL $PROTOCOL\n
        DRONE_BRANCH ${DRONE_BRANCH}\n
        DRONE_BUILD_CREATED ${DRONE_BUILD_CREATED}\n
        DRONE_BUILD_EVENT ${DRONE_BUILD_EVENT}\n
        DRONE_BUILD_NUMBER ${DRONE_BUILD_NUMBER}\nu
        DRONE_BUILD_STARTED ${DRONE_BUILD_STARTED}\n
        DRONE_COMMIT_AFTER ${DRONE_COMMIT_AFTER}\n
        DRONE_COMMIT_AUTHOR ${DRONE_COMMIT_AUTHOR}\n
        DRONE_COMMIT_AUTHOR_AVATAR ${DRONE_COMMIT_AUTHOR_AVATAR}\n
        DRONE_COMMIT_AUTHOR_EMAIL ${DRONE_COMMIT_AUTHOR_EMAIL}\n
        DRONE_COMMIT_AUTHOR_NAME ${DRONE_COMMIT_AUTHOR_NAME}\n
        DRONE_COMMIT_BEFORE ${DRONE_COMMIT_BEFORE}\n
        DRONE_COMMIT_BRANCH ${DRONE_COMMIT_BRANCH}\n
        DRONE_COMMIT_LINK ${DRONE_COMMIT_LINK}\n
        DRONE_COMMIT ${DRONE_COMMIT}\n
        DRONE_COMMIT_MESSAGE ${DRONE_COMMIT_MESSAGE}\n
        DRONE_COMMIT_REF ${DRONE_COMMIT_REF}\n
        DRONE_COMMIT_SHA ${DRONE_COMMIT_SHA}\n
        DRONE_GIT_HTTP_URL ${DRONE_GIT_HTTP_URL}\n
        DRONE_GIT_SSH_URL ${DRONE_GIT_SSH_URL}\n
        DRONE_MACHINE ${DRONE_MACHINE}\n
        DRONE_PULL_REQUEST ${DRONE_PULL_REQUEST}\n
        DRONE_REPO ${DRONE_REPO}\n
        DRONE_REPO_BRANCH ${DRONE_REPO_BRANCH}\n
        DRONE_REMOTE_URL ${DRONE_REMOTE_URL}\n
        DRONE_REPO_LINK ${DRONE_REPO_LINK}\n
        DRONE_REPO_NAME ${DRONE_REPO_NAME}\n
        DRONE_REPO_NAMESPACE ${DRONE_REPO_NAMESPACE}\n
        DRONE_REPO_PRIVATE ${DRONE_REPO_PRIVATE}\n
        DRONE_REPO_SCM ${DRONE_REPO_SCM}\n
        DRONE_REPO_VISIBILITY ${DRONE_REPO_VISIBILITY}\n
        DRONE_RUNNER_HOST ${DRONE_RUNNER_HOST}\n
        DRONE_RUNNER_HOSTNAME ${DRONE_RUNNER_HOSTNAME}\n
        DRONE_RUNNER_PLATFORM ${DRONE_RUNNER_PLATFORM}\n
        DRONE_SOURCE_BRANCH ${DRONE_SOURCE_BRANCH}\n
        DRONE_SYSTEM_HOST ${DRONE_SYSTEM_HOST}\n
        DRONE_SYSTEM_HOSTNAME ${DRONE_SYSTEM_HOSTNAME}\n
        DRONE_RUNNER_LABEL ${DRONE_RUNNER_LABEL}\n
        DRONE_SYSTEM_VERSION ${DRONE_SYSTEM_VERSION}\n
        DRONE_TAG ${DRONE_TAG}\n
        DRONE_TARGET_BRANCH ${DRONE_TARGET_BRANCH}\n" > $REPORT_PATH/$PROTOCOL/drone_report


  - name: BuildBasicTests
    image: gcc7cmake:3.14.0
    when:
      status: [ success ]
    depends_on: [ PrepareReports ]
    commands:
      - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -G "CodeBlocks - Unix Makefiles" 2>&1 | tee cmake_report
      - cmake --build . --target mqtt-sn-client-network-interface-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-gateway-network-interface-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-fixed-size-ring-buffer-test -- -j $(nproc) &&
        cmake --build . --target mqtt-sn-forwarder-test -- -j $(nproc) 2>&1 | tee make_report

  - name: GatherBuildReports
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    when:
      status: [ success, failure ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: udp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cp cmake_report $REPORT_PATH/$PROTOCOL/cmake_report
      - cp make_report $REPORT_PATH/$PROTOCOL/make_report

  - name: MqttSnClientNetworkInterfaceUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-client-network-interface-test
        --gtest_output=xml:mqtt-sn-client-network-interface-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnGatewayNetworkInterfaceUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-gateway-network-interface-test
        --gtest_output=xml:mqtt-sn-gateway-network-interface-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnFixedSizeRingBufferUnitTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-fixed-size-ring-buffer-test
        --gtest_output=xml:mqtt-sn-fixed-size-ring-buffer-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: MqttSnForwarderIntegrationTests
    image: ubuntu
    depends_on: [ BuildBasicTests ]
    commands:
      - ./mqtt-sn-forwarder-test
        --gtest_output=xml:mqtt-sn-forwarder-test.xml
        --gtest_filter=* --gtest_color=yes

  - name: GatherUnitTestSuiteReports
    image: ubuntu
    when:
      status: [ success, failure ]
    depends_on: [ MqttSnClientNetworkInterfaceUnitTests, MqttSnGatewayNetworkInterfaceUnitTests, MqttSnFixedSizeRingBufferUnitTests, MqttSnForwarderIntegrationTests ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      PROTOCOL: udp
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cp mqtt-sn-client-network-interface-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-client-network-interface-test.xml
      - cp mqtt-sn-gateway-network-interface-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-gateway-network-interface-test.xml
      - cp mqtt-sn-fixed-size-ring-buffer-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-fixed-size-ring-buffer-test.xml
      - cp mqtt-sn-forwarder-test.xml $REPORT_PATH/$PROTOCOL/mqtt-sn-forwarder-test.xml

volumes:
  - name: reports
    host:
      path: /var/local/drone/reports

---
kind: pipeline
name: LinuxCMqttSnForwarder

platform:
  os: linux
  arch: amd64

steps:
  - name: PrepareReports
    image: ubuntu
    depends_on: [ clone ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      TARGET: artifacts
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - mkdir --parents $REPORT_PATH/$TARGET
      - echo "TARGET $TARGET
        DRONE_BRANCH ${DRONE_BRANCH}\n
        DRONE_BUILD_CREATED ${DRONE_BUILD_CREATED}\n
        DRONE_BUILD_EVENT ${DRONE_BUILD_EVENT}\n
        DRONE_BUILD_NUMBER ${DRONE_BUILD_NUMBER}\n
        DRONE_BUILD_STARTED ${DRONE_BUILD_STARTED}\n
        DRONE_COMMIT_AFTER ${DRONE_COMMIT_AFTER}\n
        DRONE_COMMIT_AUTHOR ${DRONE_COMMIT_AUTHOR}\n
        DRONE_COMMIT_AUTHOR_AVATAR ${DRONE_COMMIT_AUTHOR_AVATAR}\n
        DRONE_COMMIT_AUTHOR_EMAIL ${DRONE_COMMIT_AUTHOR_EMAIL}\n
        DRONE_COMMIT_AUTHOR_NAME ${DRONE_COMMIT_AUTHOR_NAME}\n
        DRONE_COMMIT_BEFORE ${DRONE_COMMIT_BEFORE}\n
        DRONE_COMMIT_BRANCH ${DRONE_COMMIT_BRANCH}\n
        DRONE_COMMIT_LINK ${DRONE_COMMIT_LINK}\n
        DRONE_COMMIT ${DRONE_COMMIT}\n
        DRONE_COMMIT_MESSAGE ${DRONE_COMMIT_MESSAGE}\n
        DRONE_COMMIT_REF ${DRONE_COMMIT_REF}\n
        DRONE_COMMIT_SHA ${DRONE_COMMIT_SHA}\n
        DRONE_GIT_HTTP_URL ${DRONE_GIT_HTTP_URL}\n
        DRONE_GIT_SSH_URL ${DRONE_GIT_SSH_URL}\n
        DRONE_MACHINE ${DRONE_MACHINE}\n
        DRONE_PULL_REQUEST ${DRONE_PULL_REQUEST}\n
        DRONE_REPO ${DRONE_REPO}\n
        DRONE_REPO_BRANCH ${DRONE_REPO_BRANCH}\n
        DRONE_REMOTE_URL ${DRONE_REMOTE_URL}\n
        DRONE_REPO_LINK ${DRONE_REPO_LINK}\n
        DRONE_REPO_NAME ${DRONE_REPO_NAME}\n
        DRONE_REPO_NAMESPACE ${DRONE_REPO_NAMESPACE}\n
        DRONE_REPO_PRIVATE ${DRONE_REPO_PRIVATE}\n
        DRONE_REPO_SCM ${DRONE_REPO_SCM}\n
        DRONE_REPO_VISIBILITY ${DRONE_REPO_VISIBILITY}\n
        DRONE_RUNNER_HOST ${DRONE_RUNNER_HOST}\n
        DRONE_RUNNER_HOSTNAME ${DRONE_RUNNER_HOSTNAME}\n
        DRONE_RUNNER_PLATFORM ${DRONE_RUNNER_PLATFORM}\n
        DRONE_SOURCE_BRANCH ${DRONE_SOURCE_BRANCH}\n
        DRONE_SYSTEM_HOST ${DRONE_SYSTEM_HOST}\n
        DRONE_SYSTEM_HOSTNAME ${DRONE_SYSTEM_HOSTNAME}\n
        DRONE_RUNNER_LABEL ${DRONE_RUNNER_LABEL}\n
        DRONE_SYSTEM_VERSION ${DRONE_SYSTEM_VERSION}\n
        DRONE_TAG ${DRONE_TAG}\n
        DRONE_TARGET_BRANCH ${DRONE_TARGET_BRANCH}\n" > $REPORT_PATH/$TARGET/drone_report

  - name: BuildAllConfigurations
    image: gcc7cmake:3.14.0
    when:
      status: [ success ]
    depends_on: [ PrepareReports ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      TARGET: artifacts
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cmake -DCMAKE_BUILD_TYPE=MinSizeRel 2>&1 | tee cmake_report
      - cmake --build . --target CMqttSnForwarder -- -j $(nproc)  2>&1 | tee make_report
      - mv CMqttSnForwarder $REPORT_PATH/$TARGET/CMqttSnForwarderMinSizeRel
      - cmake -DCMAKE_BUILD_TYPE=Release 2>&1 | tee cmake_report
      - cmake --build . --target CMqttSnForwarder -- -j $(nproc)  2>&1 | tee make_report
      - mv CMqttSnForwarder $REPORT_PATH/$TARGET/CMqttSnForwarderRelease
      - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo 2>&1 | tee cmake_report
      - cmake --build . --target CMqttSnForwarder -- -j $(nproc)  2>&1 | tee make_report
      - mv CMqttSnForwarder $REPORT_PATH/$TARGET/CMqttSnForwarderRelWithDebInfo
      - cmake -DCMAKE_BUILD_TYPE=MinSizeRel 2>&1 | tee cmake_report
      - cmake --build . --target CMqttSnForwarder -- -j $(nproc)  2>&1 | tee make_report
      - mv CMqttSnForwarder $REPORT_PATH/$TARGET/CMqttSnForwarderMinSizeRel
      - cmake -DCMAKE_BUILD_TYPE= 2>&1 | tee cmake_report
      - cmake --build . --target CMqttSnForwarder -- -j $(nproc)  2>&1 | tee make_report
      - mv CMqttSnForwarder $REPORT_PATH/$TARGET/CMqttSnForwarder


  - name: GatherBuildReports
    image: ubuntu
    depends_on: [ BuildAllConfigurations ]
    when:
      status: [ success, failure ]
    volumes:
      - name: reports
        path: /var/local/drone/reports
    environment:
      TARGET: artifacts
      REPORT_PATH: /var/local/drone/reports/${DRONE_REPO}/${DRONE_BUILD_NUMBER}/${DRONE_RUNNER_PLATFORM}
    commands:
      - cp cmake_report $REPORT_PATH/$TARGET/cmake_report
      - cp make_report $REPORT_PATH/$TARGET/make_report

volumes:
  - name: reports
    host:
      path: /var/local/drone/reports
